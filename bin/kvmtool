#!/bin/bash

#set -x
VERSION=noversion
#
# create kvm domain
# * default config
# * domain config
# * preseed file
#
# delete kvm domain
# * destroy and undefine domain
# * destroy and undefine lv
#
# install salt on various OS Distributions
#


function usage {

if [ -n "$1" ]; then
    echo -e "\n$1\n\n"
fi

cat <<EOL

$0 $VERSION

usage:

kvmtool create <domain> like <config>
    creates a domain from a default config

kvmtool wipe <domain> like <config>
    deletes a domain and its logical volume

kvmtool salt <domain> like <config>
    installs salt on the domain

kvmtool template
    outputs a default.conf configuration to stdout
    put this in $KVMTOOLCONFIGDIR/ (env var: KVMTOOLCONFIGDIR) 

<domain> and <config> are both config files like that from the template command

EOL

exit 0
}


function die {
    echo
    echo "$*"
    echo
    exit 1
}

# all vars in CONFVARS must be set when creating or wiping, or sanitycheck() will bail out
CONFVARS="LOCATION PRESEEDSOURCEDIR PRESEEDTARGET PRESEEDSERVER KVMHOST DNSDOMAIN VCPUS RAM SIZE PVNAME GRAPHICS NETWORK PRESEEDNAME LATESETUP OTHERSETUP NAME NETWORK HOSTNETWORKSETUP CPU OSTYPE VIRTTYPE ASKBEFORECREATE ASKBEFOREWIPE ASKBEFORESALT SALTMETHOD IP SALTMASTER LATESCRIPT PRESEEDFILES DOMAINIMAGEPATH AUTOSTARTDOMAIN AUTOSALTDOMAIN"
function output_template {
cat << 'EOL'
#
# global/default options
#

# LOCATION: installer location for webbased virt-install
LOCATION="http://ftp.debian.org/debian/dists/squeeze/main/installer-amd64/"

# PRESEEDSOURCEDIR: directory below /etc/kvmtool where preseed.cfg files are stored
PRESEEDSOURCEDIR="preseeds"

# PRESEEDTARGET: the selected preseed file, the latescript and all additional files will be copied there
# this is done using rsync and can be a remote target. e.g. webuser@someserv.er:/srv/www/
# make sure that you set permissions correctly beforehand, because rsync -a is used to transfer
PRESEEDTARGET="/var/www/"

# PRESEEDSERVER: URL of webserver path, where preseed and latefiles can be found
PRESEEDSERVER="http://10.1.1.22"

# SALTMASTER: IP/FQDN of saltmaster the minion shall use
SALTMASTER="10.1.1.22"

# set to exactly "NO", to suppress manual interaction
# be very careful. you can fsck up your virtual machines without warning then
ASKBEFORECREATE=yes
ASKBEFOREWIPE=yes
ASKBEFORESALT=yes

# proxies to use when loading $LOCATION
# this is not the proxy that will be used during installation in the guest!
export http_proxy="http://10.1.1.22:8080"
export https_proxy="http://10.1.1.22:8080"
export ftp_proxy="http://10.1.1.22:8080"


#
# host settings
#

# hostname or alias of the KVM host system
KVMHOST="yourkvmhost"

# basic kvm parameters, read virt-install manpage for possible values
CPU="host"
VIRTTYPE="kvm"
OSTYPE="linux"
GRAPHICS="vnc"

#
# default kvm domain settings
#
DNSDOMAIN="example.com"
VCPUS=1
RAM=1024

# SIZE: size of logical volume. In gigabytes.
SIZE=5

# AUTOSTARTDOMAIN: set to exactly "YES" to automatically start domain on boot
AUTOSTARTDOMAIN="no"

# AUTOSALTDOMAIN: automatically call salt mode after creating domain.
# set to exactly "YES" if you want that.
# this will wait until $IP answers to ping then delay a bit and then call salt mode
AUTOSALTDOMAIN="no"

# AUTOSALTDELAY: wait some time after fresh domain answers to ping"
AUTOSALTDELAY="15"

# PVNAME: Name of physical volume to create guest logical volumes on.
# set to "NO" if you want to use image files
PVNAME="vg0"

# DOMAINIMAGEPATH: path where to put domain image files when not using lvm
# will be used if PVNAME is "NO"
DOMAINIMAGEPATH="/some/path"

# PRESEEDNAME: preseed file name. without .cfg extension and path!
PRESEEDNAME="debian_squeeze_default"

# PRESEEDFILES: additional files to copy to the preseedserver
# will be searched in config dir. do not use paths! only filenames work for now.
PRESEEDFILES="authorized_keys"

# LATESCRIPT: script to transfer to remote host and run.
# will be searched in config dir
# latescript will be called with the preseed server URL as first arg
# set to NO if you do not need that
LATESCRIPT="latescript_squeeze.sh"


# SALTMETHOD: Method to use when installing salt on a target.
# possible values: "squeeze","wheezy", "ubuntu" (tested with 13.04)
SALTMETHOD="squeeze"

# NETWORK: guest network hardware setup. read manual page of virt-install for details
NETWORK="network=default"

# HOSTNETWORKSETUP: network configuration for the guest. this is preseed syntax
# also set guest system proxy here
HOSTNETWORKSETUP="\
interface=eth0 \
netcfg/disable_dhcp=true \
netcfg/disable_autoconfig=true \
netcfg/get_nameservers=10.1.1.2 \
netcfg/get_ipaddress=$IP \
netcfg/get_netmask=255.255.255.0 \
netcfg/get_gateway=10.1.1.2 \
netcfg/confirm_static=true \
mirror/http/proxy=http://10.1.1.22:8080 \
"

# OTHERSETUP: add additional virt-install --extra-args here. e.g. setting a default root password.
OTHERSETUP="passwd/root-password=yourFunny24324-Password"

# LATESETUP: you should not change this. use LATESCRIPT!
LATESETUP="preseed/late_command=\"cd /tmp && for f in $LATESCRIPT $PRESEEDFILES; do wget $PRESEEDSERVER/\$f; done; sh $LATESCRIPT $PRESEEDSERVER\""

#
# host specific configuration
# put this in host specific files
# you may have to overwrite other vars from the global config here too!
#
# NAME: this name will be used as hostname and logical volume name of the guest that will be created or wiped
#NAME=nameofvirtualmachine

# IP: IP Address of guest. This IP will also be used to for salt mode
# you can use $IP in $HOSTNETWORKSETUP like in "kvmtool template"
#IP=
EOL
}



function sanitycheck {
    for v in $CONFVARS; do
        x=$(eval echo -n "\$$v")
        if [ -z "$x" ]; then
            die "config error: $v must must be set"
        fi
    done
    D "configuration is valid"
}


function create_domain {
    set -e 

    D "checking whether $NAME already exists..."
    # check whether a $name domain already exists
    if virsh -c "$KVMHOST" domid "$NAME" >/dev/null 2>&1; then
        die "there already is a domain called $NAME bailing out"
    fi

    # check whether a $name volume already exists
    if [ $PVNAME == "NO" ]; then
        die "error: domain image file sanity check not yet implemented"
    else
        if virsh -c "$KVMHOST" vol-path --pool "$PVNAME" "$NAME" >/dev/null 2>&1; then
            die "there already is a volume called $NAME bailing out"
        fi
    fi

    preseedcfg="$KVMTOOLCONFIGDIR/$PRESEEDSOURCEDIR/$PRESEEDNAME.cfg" 
    preseedurl="$PRESEEDSERVER/$PRESEEDNAME.cfg"

    D "checking preseed file..."
    if [ ! -f "$preseedcfg" ]; then
        die "could not find preseed file $preseedcfg"
    fi

    if [ $PVNAME == "NO" ]; then
        # we are using an image file
        diskmode="IMG"
        disksetup="--disk=\"$DOMAINIMAGEPATH/$NAME.img\",size=$SIZE";
    else
        diskmode="PV"
        disksetup="--disk=\"/dev/$PVNAME/$NAME\",size=$SIZE"
    fi

    if [ "$ASKBEFORECREATE" != "NO" ]; then

    cat <<EOL

    going to create domain "$NAME" (cpus:$VCPUS, ram:${RAM}kb, vol:$diskmode, disk:${SIZE}gb) on host $KVMHOST
    press ENTER to continue or CTRL-C to abort"

EOL
    read
    fi 

    D "copy preseed file to webserver..."
    rsync -a "$preseedcfg" "$PRESEEDTARGET"

    if [ "$LATESETUP" == "NO" ]; then
        LATESETUP=""
        D "no latesetup configured"
    else
        D "copy additional files to webserver..."
        for f in $LATESCRIPT $PRESEEDFILES; do
            rsync -a "$KVMTOOLCONFIGDIR/$f" "$PRESEEDTARGET"
        done
    fi

    D "create domain $NAME"
    time virt-install \
        --connect="$KVMHOST" \
        --name="$NAME" \
        --ram="$RAM" \
        --vcpus="$VCPUS" \
        --cpu="$CPU" \
        --os-type="$OSTYPE" \
        --virt-type="$VIRTTYPE" \
        --noautoconsole \
        --wait=-1 \
        --hvm \
        --network="$NETWORK" \
        --graphics="$GRAPHICS" \
        $disksetup \
        --location="$LOCATION" \
        --extra-args="auto=true hostname=$NAME domain=$DNSDOMAIN $LATESETUP $HOSTNETWORKSETUP $OTHERSETUP url=$preseedurl"

    if [ "$AUTOSTARTDOMAIN" == "YES" ]; then
        virsh --connect="$KVMHOST" "autostart $NAME"
    fi

}

function cmd_create {

    domain="$1"
    default="$3" 
    [ "$2" == "like" ] || usage "create command syntax error"

    # load domain config
    domainconf="$KVMTOOLCONFIGDIR/$domain.conf"
    defaultconf="$KVMTOOLCONFIGDIR/$default.conf"

    if   [ ! -f "$domainconf" ]; then
        die "error: $domainconf not found"
    fi

    if   [ ! -f "$defaultconf" ]; then
        die "error: $defaultconf not found"
    fi

    # first load domain config to allow early setup, then default config then domain config again...
    source "$domainconf"
    source "$defaultconf"
    source "$domainconf"

    D "configuration loaded"
    # make sure all vars are available...
    sanitycheck
    create_domain

    if [ "$AUTOSALTDOMAIN" != "YES" ]; then
        return 0
    fi

    # wait until it pings...
    echo -n "going to salt, waiting for host"
    until ping -c1 -q $IP >/dev/null; do
        echo -n "."
        sleep 1
    done
    echo
    echo "host found. waiting for $AUTOSALTDELAY seconds..."
    sleep "$AUTOSALTDELAY"
    ASKBEFORESALT=NO    
    salt_domain
}

function wipe_domain {
    set -e

    if [ $PVNAME == "NO" ]; then
        diskmode="IMG"
        # how to delete the image? libvirt?
        diskdelcmd=""
        die "deleting image files is not yet supported"
    else
        diskmode="PV"
        diskdelcmd="vol-delete $NAME --pool $PVNAME"
    fi

    if [ "$ASKBEFOREWIPE" != "NO" ]; then

        cat <<EOL

    going to completely wipe domain "$NAME" (cpus:$VCPUS, ram:${RAM}kb, vol:$diskmode, disk:${SIZE}gb) on host $KVMHOST
    press ENTER to continue or CTRL-C to abort"

EOL
        read
    fi 

    virsh -c "$KVMHOST" "destroy $NAME;undefine $NAME"
    virsh -c "$KVMHOST" "vol-delete $NAME --pool $PVNAME"

}

function cmd_wipe {
    D "wipe mode $*"
    domain="$1"
    default="$3" 
    [ "$2" == "like" ] || usage "wipe command syntax error"

    # load domain config
    domainconf="$KVMTOOLCONFIGDIR/$domain.conf"
    defaultconf="$KVMTOOLCONFIGDIR/$default.conf"

    if   [ ! -f "$domainconf" ]; then
        die "error: $domainconf not found"
    fi

    if   [ ! -f "$defaultconf" ]; then
        die "error: $defaultconf not found"
    fi

    # first load default config then domain config
    source "$defaultconf"
    source "$domainconf"

    D "configuration loaded"
    # make sure all vars are available...
    sanitycheck
    wipe_domain
}


function salt_domain {
    set -e

    if [ "$ASKBEFORESALT" != "NO" ]; then

        cat <<EOL

    going to install salt on domain "$NAME" (IP $IP) with master $SALTMASTER
    salting method: $SALTMETHOD
    press ENTER to continue or CTRL-C to abort"

EOL
        read
    fi 

    script=$(mktemp)
    case $SALTMETHOD in

        wheezy)

            cat >"$script" << EOL
#!/bin/bash
set -e
echo "deb http://debian.saltstack.com/debian wheezy-saltstack main" >/etc/apt/sources.list.d/salt.list 
wget -q -O- "http://debian.saltstack.com/debian-salt-team-joehealy.gpg.key" | apt-key add -
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
/etc/init.d/salt-minion restart
EOL
            ;;
        squeeze)

            cat >"$script" << EOL
#!/bin/bash
set -e
echo "deb http://debian.saltstack.com/debian squeeze-saltstack main" >/etc/apt/sources.list.d/salt.list 
echo "deb http://backports.debian.org/debian-backports squeeze-backports main contrib non-free" >>/etc/apt/sources.list.d/salt.list
wget -q -O- "http://debian.saltstack.com/debian-salt-team-joehealy.gpg.key" | apt-key add -
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
/etc/init.d/salt-minion restart
EOL
            ;;
        ubuntu)
            cat >"$script" << EOL
#!/bin/bash
set -e
apt-get -y install software-properties-common
add-apt-repository -y ppa:saltstack/salt
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
restart salt-minion
EOL
        ;;
        *)
            die "unknown salting method"
            ;;
    esac

    set -e
    D "created script $script"
    ssh="ssh -Cl root -o stricthostkeychecking=no $IP"
    $ssh 'f=$(mktemp) && cat >$f && echo "remote script: $f" && chmod +x $f && $f && rm -v $f' < $script
    rm -v "$script"
}


function cmd_salt {
    D "salt mode $*"
    domain="$1"
    default="$3" 
    [ "$2" == "like" ] || usage "salt command syntax error"

    # load domain config
    domainconf="$KVMTOOLCONFIGDIR/$domain.conf"
    defaultconf="$KVMTOOLCONFIGDIR/$default.conf"

    if   [ ! -f "$domainconf" ]; then
        die "error: $domainconf not found"
    fi

    if   [ ! -f "$defaultconf" ]; then
        die "error: $defaultconf not found"
    fi

    # first load default config then domain config
    source "$defaultconf"
    source "$domainconf"

    D "configuration loaded"
    # make sure all vars are available...
    sanitycheck
    salt_domain
}

function D {
    echo "$*" 1>&2
}

#
# main
#
mode="$1"
shift

# use default dir if KVMTOOLCONFIGDIR is not set
if [ -z "$KVMTOOLCONFIGDIR" ]; then
    KVMTOOLCONFIGDIR="/etc/kvmtool"
fi


case $mode in
    create)
        cmd_create "$1" "$2" "$3"
        exit 0
        ;;
    wipe)
        cmd_wipe "$1" "$2" "$3"
        exit 0
        ;;
    salt)
        cmd_salt "$1" "$2" "$3"
        ;;
    template)
        output_template
        exit 0
        ;;
    *)
        usage
        ;;
esac
