#!/bin/bash


#
# create kvm domain
# * default config
# * domain config
# * preseed file
#
# delete kvm domain
# * destroy and undefine domain
# * destroy and undefine lv
#
# install salt on various OS Distributions
#
#
# example use:
# kvmtool create mydomain from mydefaultconfig
# kvmtool wipe mydomain like mydefaultconfig
#


function usage {

if [ -n "$1" ]; then
    echo -e "\n$1\n\n"
fi

cat <<EOL

usage:

kvmtool create <domain> like <config>
    creates a domain from a default config

kvmtool wipe <domain> like <config>
    deletes a domain and its logical volume

kvmtool salt <domain> like <config>
    installs salt on the domain

kvmtool template
    outputs a default.conf configuration to stdout
    put this in $KVMTOOLCONFIGDIR/ (env var: KVMTOOLCONFIGDIR) 

<domain> and <config> are both config files like that from the template command

EOL

exit 0
}


function die {
    echo
    echo "$*"
    echo
    exit 1
}

CONFVARS="LOCATION PRESEEDSOURCEDIR PRESEEDTARGET PRESEEDSERVER KVMHOST DNSDOMAIN VCPUS RAM SIZE PVNAME GRAPHICS NETWORK PRESEEDNAME DEFAULTSETUP OTHERSETUP NAME NETWORK HOSTNETWORKSETUP CPU OSTYPE VIRTTYPE ASKBEFORECREATE ASKBEFOREWIPE ASKBEFORESALT SALTMETHOD IP SALTMASTER LATESCRIPT PRESEEDFILES"
function output_template {
cat << 'EOL'
#
# global/default options
#
LOCATION="http://ftp.debian.org/debian/dists/squeeze/main/installer-amd64/"
PRESEEDSOURCEDIR="./preseeds"
PRESEEDTARGET="/var/www/"
PRESEEDSERVER="http://10.17.17.22"
SALTMASTER="10.17.17.22"

# set to exactly "NO", to suppress manual interaction
ASKBEFORECREATE=yes
ASKBEFOREWIPE=yes
ASKBEFORESALT=yes

# use proxy:
http_proxy="http://10.17.17.22:8080"
https_proxy="http://10.17.17.22:8080"
ftp_proxy="http://10.17.17.22:8080"


#
# host settings
#

KVMHOST="ziolkowski"
CPU="host"
VIRTTYPE="kvm"
OSTYPE="linux"


#
# default kvm domain settings
#
DNSDOMAIN="int.druidenkacke.de"
VCPUS=1
RAM=1024
SIZE=5
PVNAME="vg0"
GRAPHICS="vnc"
NETWORK="network=intranet"

# PRESEEDNAME: preseed file name without .cfg
PRESEEDNAME="debian_squeeze_default"

# PRESEEDFILES: additional files to copy to the preseedserver
# will be searched in config dir
PRESEEDFILES="authorized_keys"

# LATESCRIPT: script to transfer to remote host and run.
# will be searched in config dir
LATESCRIPT="squeeze_latescript.sh"

SALTMETHOD="squeeze"
NETWORK="network=intranet"
HOSTNETWORKSETUP="\
interface=eth0 \
netcfg/disable_dhcp=true \
netcfg/get_nameservers=10.17.17.2 \
netcfg/get_ipaddress=$IP \
netcfg/get_netmask=255.255.255.0 \
netcfg/get_gateway=10.17.17.2 \
netcfg/confirm_static=true \
mirror/http/proxy=http://10.17.17.22:8080 \
"
OTHERSETUP="passwd/root-password=aiGhi3poodeighu"
DEFAULTSETUP="preseed/late_command=\"cd /tmp && for f in $LATESCRIPT $PRESEEDFILES; do wget $PRESEEDSERVER/\$f; done; sh $LATESCRIPT\""

#
# host specific configuration
# put this in host specific files
# you may have to overwrite other vars from the global config here too!
#
#NAME=nameofvirtualmachine
#IP=
EOL
}



function sanitycheck {
    for v in $CONFVARS; do
        x=$(eval echo -n "\$$v")
        if [ -z "$x" ]; then
            die "config error: $v must must be set"
        fi
    done
    D "configuration is valid"
}


function create_domain {
    set -e 

    D "checking whether $NAME already exists..."
    # check whether a $name domain already exists
    if virsh -c "$KVMHOST" domid "$NAME" >/dev/null 2>&1; then
        die "there already is a domain called $NAME bailing out"
    fi

    # check whether a $name volume already exists
    if virsh -c "$KVMHOST" vol-path --pool "$PVNAME" "$NAME" >/dev/null 2>&1; then
        die "there already is a volume called $NAME bailing out"
    fi

    preseedcfg="$KVMTOOLCONFIGDIR/$PRESEEDSOURCEDIR/$PRESEEDNAME.cfg" 
    preseedurl="$PRESEEDSERVER/$PRESEEDNAME.cfg"

    D "checking preseed file..."
    if [ ! -f "$preseedcfg" ]; then
        die "could not find preseed file $preseedcfg"
    fi

    if [ "$ASKBEFORECREATE" != "NO" ]; then

    cat <<EOL

    going to create domain "$NAME" (cpus:$VCPUS, ram:${RAM}kb, disk:${SIZE}gb) on PV $PVNAME on host $KVMHOST
    press ENTER to continue or CTRL-C to abort"

EOL
    read
    fi 

    D "copy preseed file to webserver..."
    rsync -a "$preseedcfg" "$PRESEEDTARGET"
    D "copy additional files to webserver..."
    for f in $LATESCRIPT $PRESEEDFILES; do
        rsync -a "$KVMTOOLCONFIGDIR/$f" "$PRESEEDTARGET"
    done


    D "create domain $NAME"
    echo time virt-install \
        --connect="$KVMHOST" \
        --name="$NAME" \
        --ram="$RAM" \
        --vcpus="$VCPUS" \
        --cpu="$CPU" \
        --os-type="$OSTYPE" \
        --virt-type="$VIRTTYPE" \
        --noautoconsole \
        --wait=-1 \
        --hvm \
        --network="$NETWORK" \
        --graphics="$GRAPHICS" \
        --disk="/dev/$PVNAME/$NAME,size=$SIZE" \
        --location="$LOCATION" \
        --extra-args="auto=true hostname=$NAME domain=$DNSDOMAIN $DEFAULTSETUP $HOSTNETWORKSETUP $OTHERSETUP url=$preseedurl"

}

function cmd_create {

    domain="$1"
    default="$3" 
    [ "$2" == "like" ] || usage "create command syntax error"

    # load domain config
    domainconf="$KVMTOOLCONFIGDIR/$domain.conf"
    defaultconf="$KVMTOOLCONFIGDIR/$default.conf"

    if   [ ! -f "$domainconf" ]; then
        die "error: $domainconf not found"
    fi

    if   [ ! -f "$defaultconf" ]; then
        die "error: $defaultconf not found"
    fi

    # first load domain config to allow early setup, then default config then domain config again...
    source "$domainconf"
    source "$defaultconf"
    source "$domainconf"

    D "configuration loaded"
    # make sure all vars are available...
    sanitycheck
    create_domain
}

function wipe_domain {
    set -e

    if [ "$ASKBEFOREWIPE" != "NO" ]; then

    cat <<EOL

    going to completely wipe domain "$NAME" (cpus:$VCPUS, ram:${RAM}kb, disk:${SIZE}gb) from PV $PVNAME on host $KVMHOST
    press ENTER to continue or CTRL-C to abort"

EOL
    read
    fi 

    virsh -c "$KVMHOST" "destroy $NAME;undefine $NAME;vol-delete $NAME --pool $PVNAME"

}

function cmd_wipe {
    D "wipe mode $*"
    domain="$1"
    default="$3" 
    [ "$2" == "like" ] || usage "wipe command syntax error"

    # load domain config
    domainconf="$KVMTOOLCONFIGDIR/$domain.conf"
    defaultconf="$KVMTOOLCONFIGDIR/$default.conf"

    if   [ ! -f "$domainconf" ]; then
        die "error: $domainconf not found"
    fi

    if   [ ! -f "$defaultconf" ]; then
        die "error: $defaultconf not found"
    fi

    # first load default config then domain config
    source "$defaultconf"
    source "$domainconf"

    D "configuration loaded"
    # make sure all vars are available...
    sanitycheck
    wipe_domain
}


function salt_domain {
    set -e

    if [ "$ASKBEFORESALT" != "NO" ]; then

        cat <<EOL

    going to install salt on domain "$NAME" (IP $IP) with master $SALTMASTER
    salting method: $SALTMETHOD
    press ENTER to continue or CTRL-C to abort"

EOL
        read
    fi 

    script=$(mktemp)
    case $SALTMETHOD in

        squeeze)

            cat >"$script" << EOL
#!/bin/bash

set -e
echo "deb http://debian.saltstack.com/debian squeeze-saltstack main" >/etc/apt/sources.list.d/salt.list 
echo "deb http://backports.debian.org/debian-backports squeeze-backports main contrib non-free" >>/etc/apt/sources.list.d/salt.list
wget -q -O- "http://debian.saltstack.com/debian-salt-team-joehealy.gpg.key" | apt-key add -
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
/etc/init.d/salt-minion restart
EOL
            ;;
        ubuntu)
            cat >"$script" << EOL
#!/bin/bash

set -e
apt-get -y install software-properties-common
add-apt-repository -y ppa:saltstack/salt
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
restart salt-minion
EOL
        ;;
        *)
            die "unknown salting method"
            ;;
    esac

    set -e
    D "created script $script"
    ssh="ssh -Cl root $IP"
    $ssh 'f=$(mktemp) && cat >$f && echo "remote script: $f" && chmod +x $f && $f && rm -v $f' < $script
    rm -v "$script"
}


function cmd_salt {
    D "salt mode $*"
    domain="$1"
    default="$3" 
    [ "$2" == "like" ] || usage "salt command syntax error"

    # load domain config
    domainconf="$KVMTOOLCONFIGDIR/$domain.conf"
    defaultconf="$KVMTOOLCONFIGDIR/$default.conf"

    if   [ ! -f "$domainconf" ]; then
        die "error: $domainconf not found"
    fi

    if   [ ! -f "$defaultconf" ]; then
        die "error: $defaultconf not found"
    fi

    # first load default config then domain config
    source "$defaultconf"
    source "$domainconf"

    D "configuration loaded"
    # make sure all vars are available...
    sanitycheck
    salt_domain
}

function D {
    echo "$*" 1>&2
}

#
# main
#
mode="$1"
shift

if [ -z "$KVMTOOLCONFIGDIR" ]; then
    KVMTOOLCONFIGDIR="configs"
fi


case $mode in
    create)
        cmd_create "$1" "$2" "$3"
        exit 0
        ;;
    wipe)
        cmd_wipe "$1" "$2" "$3"
        exit 0
        ;;
    salt)
        cmd_salt "$1" "$2" "$3"
        ;;
    template)
        output_template
        exit 0
        ;;
    *)
        usage
        ;;
esac
