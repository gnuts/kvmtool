#!/bin/bash

#set -x
VERSION=noversion
#
# todo: add description
# todo: add copyright notice
#


# D $message
# ----------
# debug output goes to stderr
#
function D {
    echo "$*" 1>&2
}

#
# usage $message
# --------------
# output commandline usage message and quit.
# optionally output an error message
#
function usage {

if [ -n "$1" ]; then
    echo -e "\n$1\n\n"
fi

cat <<EOL

$0 $VERSION

usage:

kvmtool create <domain> like <config>
    creates a domain from a default config

kvmtool wipe <domain> like <config>
    deletes a domain and its logical volume

kvmtool salt <domain> like <config>
    installs salt on the domain

kvmtool template
    outputs a default.conf configuration to stdout
    put this in $KVMTOOLCONFIGDIR/ (env var: KVMTOOLCONFIGDIR) 

<domain> and <config> are both config files like that from the template command

EOL

exit 0
}


#
# die $message
# ------------
# die in a nice way
function die {
    echo
    echo "$*"
    echo
    exit 1
}

# all vars in CONFVARS must be set when creating or wiping, or sanitycheck() will bail out
CONFVARS="LOCATION PRESEEDSOURCEDIR PRESEEDTARGET PRESEEDSERVER KVMHOST DNSDOMAIN VCPUS RAM SIZE PVNAME GRAPHICS NETWORK PRESEEDNAME LATESETUP OTHERSETUP NAME NETWORK HOSTNETWORKSETUP CPU OSTYPE VIRTTYPE ASKBEFORECREATE ASKBEFOREWIPE ASKBEFORESALT SALTMETHOD IP SALTMASTER LATESCRIPT PRESEEDFILES DOMAINIMAGEPATH AUTOSTARTDOMAIN AUTOSALTDOMAIN"

#
# output template
# ---------------
# print a default configuration file to STDOUT
#
function output_template {
    cat /usr/share/kvmtool/default.config
}


#
# sanitycheck
# -----------
# makes sure every variable defined in $CONFVARS is defined.
# script bails out if not.
#
function sanitycheck {
    for v in $CONFVARS; do
        x=$(eval echo -n "\$$v")
        if [ -z "$x" ]; then
            die "config error: $v must must be set"
        fi
    done
    D "configuration is valid"
}

#
# exists domain
# -------------
# check if domain exists, return true if so. 
#
function exists_domain {
    D "checking whether $NAME already exists..."
    # check whether a $name domain already exists
    if virsh -c "$KVMHOST" domid "$NAME" >/dev/null 2>&1; then
        return 1
    fi

    return 0
}

#
# create domain
# -------------
# if domain exists -> abort
# if logical volume exists -> abort
# if preseedfile not exists -> abort
# if interactive, ask user whether to continue
# run virt-install
# if wants autostart, add to autostart
#
function create_domain {
    set -e 

    if exists_domain; then
        die "there already is a domain called $NAME bailing out"
    fi

    # check whether a $name volume already exists
    if [ $PVNAME == "NO" ]; then
        die "error: domain image file sanity check not yet implemented"
    else
        if virsh -c "$KVMHOST" vol-path --pool "$PVNAME" "$NAME" >/dev/null 2>&1; then
            die "there already is a volume called $NAME bailing out"
        fi
    fi

    preseedcfg="$KVMTOOLCONFIGDIR/$PRESEEDSOURCEDIR/$PRESEEDNAME.cfg" 
    preseedurl="$PRESEEDSERVER/$PRESEEDNAME.cfg"

    D "checking preseed file..."
    if [ ! -f "$preseedcfg" ]; then
        die "could not find preseed file $preseedcfg"
    fi

    if [ $PVNAME == "NO" ]; then
        # we are using an image file
        diskmode="IMG"
        disksetup="--disk=\"$DOMAINIMAGEPATH/$NAME.img\",size=$SIZE";
    else
        diskmode="PV"
        disksetup="--disk=\"/dev/$PVNAME/$NAME\",size=$SIZE"
    fi

    if [ "$ASKBEFORECREATE" != "NO" ]; then

    cat <<EOL

    going to create domain "$NAME" (cpus:$VCPUS, ram:${RAM}kb, vol:$diskmode, disk:${SIZE}gb) on host $KVMHOST
    press ENTER to continue or CTRL-C to abort"

EOL
    read
    fi 

    D "copy preseed file to webserver..."
    rsync -a "$preseedcfg" "$PRESEEDTARGET"

    if [ "$LATESETUP" == "NO" ]; then
        LATESETUP=""
        D "no latesetup configured"
    else
        D "copy additional files to webserver..."
        for f in $LATESCRIPT $PRESEEDFILES; do
            rsync -a "$KVMTOOLCONFIGDIR/$f" "$PRESEEDTARGET"
        done
    fi

    D "create domain $NAME"
    time virt-install \
        --connect="$KVMHOST" \
        --name="$NAME" \
        --ram="$RAM" \
        --vcpus="$VCPUS" \
        --cpu="$CPU" \
        --os-type="$OSTYPE" \
        --virt-type="$VIRTTYPE" \
        --noautoconsole \
        --wait=-1 \
        --hvm \
        --network="$NETWORK" \
        --graphics="$GRAPHICS" \
        $disksetup \
        --location="$LOCATION" \
        --extra-args="auto=true hostname=$NAME domain=$DNSDOMAIN $LATESETUP $HOSTNETWORKSETUP $OTHERSETUP url=$preseedurl"

    if [ "$AUTOSTARTDOMAIN" == "YES" ]; then
        virsh --connect="$KVMHOST" "autostart $NAME"
    fi

}

#
# load config $domain $default
# ----------------------------
#
function load_config {
    local domain="$1"
    local default="$3" 
    # load domain config
    domainconf="$KVMTOOLCONFIGDIR/$domain.conf"
    defaultconf="$KVMTOOLCONFIGDIR/$default.conf"

    if   [ ! -f "$domainconf" ]; then
        die "error: $domainconf not found"
    fi

    if   [ ! -f "$defaultconf" ]; then
        die "error: $defaultconf not found"
    fi

    # first load domain config to allow early setup, then default config then domain config again...
    source "$domainconf"
    source "$defaultconf"
    source "$domainconf"

    D "configuration loaded"
    # make sure all vars are available...
    sanitycheck
}


#
# wipe_domain
# -----------
#
function wipe_domain {
    set -e

    if [ $PVNAME == "NO" ]; then
        diskmode="IMG"
        # how to delete the image? libvirt?
        diskdelcmd=""
        die "deleting image files is not yet supported"
    else
        diskmode="PV"
        diskdelcmd="vol-delete $NAME --pool $PVNAME"
    fi

    if [ "$ASKBEFOREWIPE" != "NO" ]; then

        cat <<EOL

    going to completely wipe domain "$NAME" (cpus:$VCPUS, ram:${RAM}kb, vol:$diskmode, disk:${SIZE}gb) on host $KVMHOST
    press ENTER to continue or CTRL-C to abort"

EOL
        read
    fi 

    virsh -c "$KVMHOST" "destroy $NAME;undefine $NAME"
    virsh -c "$KVMHOST" "vol-delete $NAME --pool $PVNAME"

}

#
# salt_domain
# -----------
# todo: move scripts to template files
#
function salt_domain {
    set -e

    if [ "$ASKBEFORESALT" != "NO" ]; then

        cat <<EOL

    going to install salt on domain "$NAME" (IP $IP) with master $SALTMASTER
    salting method: $SALTMETHOD
    press ENTER to continue or CTRL-C to abort"

EOL
        read
    fi 

    script=$(mktemp)
    case $SALTMETHOD in

        wheezy)

            cat >"$script" << EOL
#!/bin/bash
set -e
echo "deb http://debian.saltstack.com/debian wheezy-saltstack main" >/etc/apt/sources.list.d/salt.list 
wget -q -O- "http://debian.saltstack.com/debian-salt-team-joehealy.gpg.key" | apt-key add -
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
/etc/init.d/salt-minion restart
EOL
            ;;
        squeeze)

            cat >"$script" << EOL
#!/bin/bash
set -e
echo "deb http://debian.saltstack.com/debian squeeze-saltstack main" >/etc/apt/sources.list.d/salt.list 
echo "deb http://backports.debian.org/debian-backports squeeze-backports main contrib non-free" >>/etc/apt/sources.list.d/salt.list
wget -q -O- "http://debian.saltstack.com/debian-salt-team-joehealy.gpg.key" | apt-key add -
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
/etc/init.d/salt-minion restart
EOL
            ;;
        ubuntu)
            cat >"$script" << EOL
#!/bin/bash
set -e
apt-get -y install software-properties-common
add-apt-repository -y ppa:saltstack/salt
apt-get update
apt-get -y install salt-minion
perl -p -i -e 's/^\#master: salt/master: $SALTMASTER/' /etc/salt/minion
restart salt-minion
EOL
        ;;
        *)
            die "unknown salting method"
            ;;
    esac

    set -e
    D "created script $script"
    ssh="ssh -Cl root -o stricthostkeychecking=no $IP"
    $ssh 'f=$(mktemp) && cat >$f && echo "remote script: $f" && chmod +x $f && $f && rm -v $f' < $script
    rm -v "$script"
}

#
# cmd_create $domain "like" $default
# ----------------------------------
#
function cmd_create {
    D "create mode"
    load_config "$1" "$2"
    create_domain

    if [ "$AUTOSALTDOMAIN" != "YES" ]; then
        return 0
    fi

    # wait until it pings...
    # todo: add a maximum waiting time?
    echo -n "going to salt, waiting for host"
    until ping -c1 -q $IP >/dev/null; do
        echo -n "."
        sleep 1
    done
    echo
    echo "host found. waiting for $AUTOSALTDELAY seconds..."
    sleep "$AUTOSALTDELAY"
    ASKBEFORESALT=NO    
    salt_domain
}

#
# cmd_wipe $domain $default
# --------------------------------
#
function cmd_wipe {
    D "wipe mode $*"
    [ "$2" == "like" ] || usage "wipe command syntax error"
    load_config "$1" "$2"
    wipe_domain
}


#
# cmd_salt $domain $default
# --------------------------------
#
function cmd_salt {
    D "salt mode $*"
    load_config "$1" "$2"
    salt_domain
}

#
# main
#
mode="$1"
shift

# use default dir if KVMTOOLCONFIGDIR is not set
if [ -z "$KVMTOOLCONFIGDIR" ]; then
    KVMTOOLCONFIGDIR="/etc/kvmtool"
fi


case $mode in
    create)
        [ "$2" == "like" ] || usage "create command syntax error"
        cmd_create "$1" "$3"
        exit 0
        ;;
    wipe)
        [ "$2" == "like" ] || usage "wipe command syntax error"
        cmd_wipe "$1" "$3"
        exit 0
        ;;
    salt)
        [ "$2" == "like" ] || usage "salt command syntax error"
        cmd_salt "$1" "$3"
        ;;
    template)
        output_template
        exit 0
        ;;
    *)
        usage
        ;;
esac
